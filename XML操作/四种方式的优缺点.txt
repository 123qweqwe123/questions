DOM:

创建一个DocumentBuilderFactory对象，静态方法newInstance()
创建一个DocumentBuilder对象，DocumentBuilderFactory实例的newDocumentBuilder()方法
通过DocumentBuilder对象调用newDocument方法，返回一个Document对象
通过Document对象调用creatElement方法，创建一个节点元素，返回Element对象 
通过Element对象的appendChild方法向该元素添加子元素 
通过Element对象的setAttribute方法，给元素添加属性 
……
通过TransformerFactory的静态方法newInstance()，创建TransformerFactory对象
通过TransformerFactory的newTransformer(),创建Transformer对象
Transformer对象的setOutputProperty(OutputKeys.INDENT,”yes”)方法可以用来换行(可选)
调用Transformer的transform()方法将创建的XML转换成Result,Result可通过new File()构建输出文件
/**
     * DOM方式创建xml文件
     * @param file 文件
     * @throws Exception
     */
    public static void DOMcreate(File file)throws Exception{
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        Document document=db.newDocument();
        document.setXmlStandalone(true);
        Element root=document.createElement("tb_student");
        for (int i = 0; i < 3; i++) {
            Element student=document.createElement("student");
            Element name=document.createElement("name"),
                    age=document.createElement("age"),
                    grade=document.createElement("grade");
                student.setAttribute("id", i+"");
                name.setTextContent("张"+i);
                age.setTextContent(""+i*5);
                grade.setTextContent(""+i*20);
                student.appendChild(name);
                student.appendChild(age);
                student.appendChild(grade);
            root.appendChild(student);
        }
        document.appendChild(root);     
        TransformerFactory tff=TransformerFactory.newInstance();
        Transformer tf=tff.newTransformer();
        tf.setOutputProperty(OutputKeys.INDENT, "yes");
        tf.transform(new DOMSource(document), new StreamResult(file));
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
SAX:

用ArrayList存储xml所需的对象集合
通过SAXTransformerFactory的静态方法newInstance()创建一个SAXTransformerFactory对象
通过SAXTransformerFactory对象的newTransformerHandler()创建一个TransformerHandler对象
通过TransformerHandler对象的getTransformer()创建一个Transformer对象
Transformer对象的setOutputProperty(OutputKeys.INDENT,”yes”)可以实现换行(可选)
Transformer对象的setOutputProperty(OutputKeys.ENCODING,”编码名称”)可以实现编码格式(可选)
创建Result对象，并使用TransformerHandler对象的setResult(Result)方法使其与TransformerHandler关联
使用TransformerHandler对象的进行xml文件内容的编写(遍历ArrayList创建各个节点) 
startDocument();//开始文档 
endDocument();//结束文档 
startElement(String uri,String localName,String qName,Attributes atts)；//元素标签开始 
endElement(String uri,String localName,String qName,Attributes atts)；//元素标签结束
    /**
     * SAX方式创建xml文件
     * @param file
     * @throws Exception
     */
    public static void SAXcreate(File file)throws Exception {
        //初始化要生成文件的数据
        ArrayList<Student> students=new ArrayList<Student>();
        for (int i = 0; i < 3; i++) {
            Student student=new Student(i,"张"+i,5*i,10*i);
            students.add(student);
        }

        SAXTransformerFactory stf=(SAXTransformerFactory) SAXTransformerFactory.newInstance();
        TransformerHandler handler=stf.newTransformerHandler();
        Transformer tf=handler.getTransformer();
        tf.setOutputProperty(OutputKeys.INDENT, "yes");//标签自动换行
        tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");//编码格式
        StreamResult result=new StreamResult(file);//创建Result对象
        handler.setResult(result);//关联

        handler.startDocument();
        handler.startElement("", "", "tb_students", null);//根节点标签

        for (Student student : students) {
            AttributesImpl atts=new AttributesImpl();//创建熟悉
            atts.addAttribute("", "", "id", "", student.getId()+"");
            handler.startElement("", "", "student", atts);//元素标签开始

            handler.startElement("", "", "name", null);//元素标签开始
            handler.characters(student.getName().toCharArray(), 0, student.getName().length());//元素标签内容
            handler.endElement("", "", "name");//元素标签结束

            handler.startElement("", "", "age", null);
            handler.characters((""+student.getAge()).toCharArray(), 0, (""+student.getAge()).length());
            handler.endElement("", "", "age");

            handler.startElement("", "", "grade", null);
            handler.characters((""+student.getGrade()).toCharArray(), 0,(""+student.getGrade()).toCharArray().length);
            handler.endElement("", "", "grade");

            handler.endElement("", "", "student");//元素标签结束
        }

        handler.endElement("", "", "tb_students");//结束根节点标签
        handler.endDocument();
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
实体类student

package entity;

public class Student {

    private int id;
    private String name;
    private int age;
    private int grade;

    public Student() {
        // TODO Auto-generated constructor stub
    }
    public Student(int id, String name, int age, int grade) {
        super();
        this.id = id;
        this.name = name;
        this.age = age;
        this.grade = grade;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public int getGrade() {
        return grade;
    }
    public void setGrade(int grade) {
        this.grade = grade;
    }

}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
DOM4J:

通过DocumentHelper的静态方法createDocument创建一个Document对象
创建节点:Document对象的addElement方法 返回Element对象
节点添加属性:Element对象的addAttribute方法 
节点添加内容:Element对象的setText、add方法
创建XMLWriter对象 (new) (可使用输出流、OutputFormat作为参数,分别给出输出地址和格式) 
XMLWriter对象的setEscapeText方法可以设置字符是否转义，默认true(转义)
调用XMLWriter对象的write方法,Document对象作为参数
关闭XMLWriter对象，以及相关资源的close操作
    /**
     * DOM4J方式创建xml文件
     * @param file
     * @throws Exception
     */
    public static void DOM4Jcreate(File file)throws Exception{
        org.dom4j.Document document=DocumentHelper.createDocument();
        org.dom4j.Element root=document.addElement("rss");
        root.addAttribute("version", "2.0");
        org.dom4j.Element channel=root.addElement("channel");
        org.dom4j.Element title=channel.addElement("title");
        title.setText("新闻国内");
        //...
        XMLWriter writer=new XMLWriter(new FileOutputStream(file),OutputFormat.createPrettyPrint());
        writer.setEscapeText(false);//字符是否转义,默认true
        writer.write(document);
        writer.close();
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
注:此处模拟的是一个”rss”文件的生成部分代码，RSS(Really Simple Syndication)是一种描述和同步网站内容的格式，是使用最广泛的XML应用。

JDOM:

创建Document对象 (new)
创建Element对象 (new) 并向其中添加属性/内容/子节点
向Document对象中添加Element节点 addContent/setContent 
(或者创建Document对象时将Element对象作为参数等)
创建XMLOutputter对象 (new) 并调用output方法生成xml文档
    /**
     * JDOM方式创建xml文件
     * @param file
     * @throws Exception
     */
    public static void JDOMcreate(File file)throws Exception{
        org.jdom2.Document document=new org.jdom2.Document();
        org.jdom2.Element root=new org.jdom2.Element("rss");
        root.setAttribute("version", "2.0");
        root.addContent(
                new org.jdom2.Element("channel").addContent(
                        new org.jdom2.Element("title").setText("新闻国内")));
        document.setRootElement(root);
        XMLOutputter outputter=new XMLOutputter();
        outputter.setFormat(Format.getPrettyFormat());//设置文本格式
        outputter.output(document, new FileOutputStream(file));
    }




    1. DOM（Document Object Model)

      DOM是用与平台和语言无关的方式表示XML文档的官方W3C标准。DOM是以层次结构组织的节点或信息片断的集合。这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作。由于它是基于信息层次的，因而DOM被认为是基于树或基于对象的。

【优点】
      ①允许应用程序对数据和结构做出更改。
      ②访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。
【缺点】
      ①通常需要加载整个XML文档来构造层次结构，消耗资源大。
    

2. SAX（Simple API for XML)

     SAX处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且，由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不必解析整个文档；它可以在某个条件得到满足时停止解析。一般来说，SAX还比它的替代者DOM快许多。

     选择DOM还是选择SAX？ 对于需要自己编写代码来处理XML文档的开发人员来说， 选择DOM还是SAX解析模型是一个非常重要的设计决策。 DOM采用建立树形结构的方式访问XML文档，而SAX采用的是事件模型。

     DOM解析器把XML文档转化为一个包含其内容的树，并可以对树进行遍历。用DOM解析模型的优点是编程容易，开发人员只需要调用建树的指令，然后利用navigation APIs访问所需的树节点来完成任务。可以很容易的添加和修改树中的元素。然而由于使用DOM解析器的时候需要处理整个XML文档，所以对性能和内存的要求比较高，尤其是遇到很大的XML文件的时候。由于它的遍历能力，DOM解析器常用于XML文档需要频繁的改变的服务中。

     SAX解析器采用了基于事件的模型，它在解析XML文档的时候可以触发一系列的事件，当发现给定的tag的时候，它可以激活一个回调方法，告诉该方法制定的标签已经找到。SAX对内存的要求通常会比较低，因为它让开发人员自己来决定所要处理的tag.特别是当开发人员只需要处理文档中所包含的部分数据时，SAX这种扩展能力得到了更好的体现。但用SAX解析器的时候编码工作会比较困难，而且很难同时访问同一个文档中的多处不同数据。

【优势】
     ①不需要等待所有数据都被处理，分析就能立即开始。
     ②只在读取数据时检查数据，不需要保存在内存中。
     ③可以在某个条件得到满足时停止解析，不必解析整个文档。
     ④效率和性能较高，能解析大于系统内存的文档。

【缺点】
     ①需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。
     ②单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。
  

 3. JDOM(Java-based Document Object Model)

     JDOM的目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一个Java特定模型，JDOM一直得到大力推广和促进。正在考虑通过“Java规范请求JSR-102”将它最终用作“Java标准扩展”。从2000年初就已经开始了JDOM开发。

     JDOM与DOM主要有两方面不同。首先，JDOM仅使用具体类而不使用接口。这在某些方面简化了API，但是也限制了灵活性。第二，API大量使用了Collections类，简化了那些已经熟悉这些类的Java开发者的使用。

     JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java/XML问题”（根据学习曲线假定为20%）。JDOM对于大多数Java/XML应用程序来说当然是有用的，并且大多数开发者发现API比DOM容易理解得多。JDOM还包括对程序行为的相当广泛检查以防止用户做任何在XML中无意义的事。然而，它仍需要您充分理解XML以便做一些超出基本的工作（或者甚至理解某些情况下的错误）。这也许是比学习DOM或JDOM接口都更有意义的工作。

     JDOM自身不包含解析器。它通常使用SAX2解析器来解析和验证输入XML文档（尽管它还可以将以前构造的DOM表示作为输入）。它包含一些转换器以将JDOM表示输出成SAX2事件流、DOM模型或XML文本文档。JDOM是在Apache许可证变体下发布的开放源码。

【优点】
     ①使用具体类而不是接口，简化了DOM的API。
     ②大量使用了Java集合类，方便了