@Cacheable(value={"users"}, key="#user.id", condition="#user.id%2==0")
   public User find(User user) {
      System.out.println("find user by user " + user);
      return user;
   }

<!-- 
value 缓存对应的名称
key  key属性是用来指定Spring缓存方法的返回结果时对应的key “#id”，“#p0”，“#user.id”
condition 执行缓存的条件
-->

<!-- 
@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果
而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。
-->
      
   @CachePut("users")//每次都会执行方法，并将结果存入指定的缓存中
   public User find(Integer id) {
      returnnull;
   }

 
 @CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。
 @CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。
 其中value、key和condition的语义与@Cacheable对应的属性类似。
 即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；
 key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；
 condition表示清除操作发生的条件。
 allEntries boolean 当为true 时表示全部清除，不通过key清除
 beforeInvocation。true表示方法执行之前清除（发生异常或者其它导致方法不能执行）。


 
  @Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut
  @CacheEvict。
   @Caching(cacheable = @Cacheable("users"), evict = { @CacheEvict("cache2"),
         @CacheEvict(value = "cache3", allEntries = true) })
   public User find(Integer id) {
      returnnull;
   }
----
----
spring 整合 ehcache
1.添加jar
2.引入依赖
3.创建ehcache.xml

参考资料
http://www.cnblogs.com/jianjianyang/p/4938765.html

